// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: simpledy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error)
	PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error)
	PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error)
	UserInfo(ctx context.Context, in *DouyinUserRequest, opts ...grpc.CallOption) (*DouyinUserResponse, error)
	UserLogin(ctx context.Context, in *DouyinUserLoginRequest, opts ...grpc.CallOption) (*DouyinUserLoginResponse, error)
	UserRegister(ctx context.Context, in *DouyinUserRegisterRequest, opts ...grpc.CallOption) (*DouyinUserRegisterResponse, error)
	VideoInfo(ctx context.Context, in *DouyinVideoInfoRequest, opts ...grpc.CallOption) (*DouyinVideoInfoResponse, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error) {
	out := new(DouyinFeedResponse)
	err := c.cc.Invoke(ctx, "/VideoService/Feed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error) {
	out := new(DouyinPublishListResponse)
	err := c.cc.Invoke(ctx, "/VideoService/PublishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error) {
	out := new(DouyinPublishActionResponse)
	err := c.cc.Invoke(ctx, "/VideoService/PublishAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UserInfo(ctx context.Context, in *DouyinUserRequest, opts ...grpc.CallOption) (*DouyinUserResponse, error) {
	out := new(DouyinUserResponse)
	err := c.cc.Invoke(ctx, "/VideoService/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UserLogin(ctx context.Context, in *DouyinUserLoginRequest, opts ...grpc.CallOption) (*DouyinUserLoginResponse, error) {
	out := new(DouyinUserLoginResponse)
	err := c.cc.Invoke(ctx, "/VideoService/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UserRegister(ctx context.Context, in *DouyinUserRegisterRequest, opts ...grpc.CallOption) (*DouyinUserRegisterResponse, error) {
	out := new(DouyinUserRegisterResponse)
	err := c.cc.Invoke(ctx, "/VideoService/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) VideoInfo(ctx context.Context, in *DouyinVideoInfoRequest, opts ...grpc.CallOption) (*DouyinVideoInfoResponse, error) {
	out := new(DouyinVideoInfoResponse)
	err := c.cc.Invoke(ctx, "/VideoService/VideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	Feed(context.Context, *DouyinFeedRequest) (*DouyinFeedResponse, error)
	PublishList(context.Context, *DouyinPublishListRequest) (*DouyinPublishListResponse, error)
	PublishAction(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error)
	UserInfo(context.Context, *DouyinUserRequest) (*DouyinUserResponse, error)
	UserLogin(context.Context, *DouyinUserLoginRequest) (*DouyinUserLoginResponse, error)
	UserRegister(context.Context, *DouyinUserRegisterRequest) (*DouyinUserRegisterResponse, error)
	VideoInfo(context.Context, *DouyinVideoInfoRequest) (*DouyinVideoInfoResponse, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) Feed(context.Context, *DouyinFeedRequest) (*DouyinFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedVideoServiceServer) PublishList(context.Context, *DouyinPublishListRequest) (*DouyinPublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishList not implemented")
}
func (UnimplementedVideoServiceServer) PublishAction(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAction not implemented")
}
func (UnimplementedVideoServiceServer) UserInfo(context.Context, *DouyinUserRequest) (*DouyinUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedVideoServiceServer) UserLogin(context.Context, *DouyinUserLoginRequest) (*DouyinUserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedVideoServiceServer) UserRegister(context.Context, *DouyinUserRegisterRequest) (*DouyinUserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedVideoServiceServer) VideoInfo(context.Context, *DouyinVideoInfoRequest) (*DouyinVideoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoInfo not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoService/Feed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).Feed(ctx, req.(*DouyinFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_PublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinPublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoService/PublishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishList(ctx, req.(*DouyinPublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_PublishAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinPublishActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoService/PublishAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishAction(ctx, req.(*DouyinPublishActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UserInfo(ctx, req.(*DouyinUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UserLogin(ctx, req.(*DouyinUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinUserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoService/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UserRegister(ctx, req.(*DouyinUserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_VideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinVideoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).VideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoService/VideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).VideoInfo(ctx, req.(*DouyinVideoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _VideoService_Feed_Handler,
		},
		{
			MethodName: "PublishList",
			Handler:    _VideoService_PublishList_Handler,
		},
		{
			MethodName: "PublishAction",
			Handler:    _VideoService_PublishAction_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _VideoService_UserInfo_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _VideoService_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _VideoService_UserRegister_Handler,
		},
		{
			MethodName: "VideoInfo",
			Handler:    _VideoService_VideoInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simpledy.proto",
}

// SocialServiceClient is the client API for SocialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialServiceClient interface {
	GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListResponse, error)
	GetFollowerList(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error)
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error)
	RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error)
	MsgChat(ctx context.Context, in *MsgChatRequest, opts ...grpc.CallOption) (*MsgChatResponse, error)
	MsgAction(ctx context.Context, in *MsgActionRequest, opts ...grpc.CallOption) (*MsgActionResponse, error)
}

type socialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialServiceClient(cc grpc.ClientConnInterface) SocialServiceClient {
	return &socialServiceClient{cc}
}

func (c *socialServiceClient) GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListResponse, error) {
	out := new(GetFollowListResponse)
	err := c.cc.Invoke(ctx, "/SocialService/GetFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetFollowerList(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error) {
	out := new(FollowerListResponse)
	err := c.cc.Invoke(ctx, "/SocialService/GetFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error) {
	out := new(GetFriendListResponse)
	err := c.cc.Invoke(ctx, "/SocialService/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error) {
	out := new(RelationActionResponse)
	err := c.cc.Invoke(ctx, "/SocialService/RelationAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) MsgChat(ctx context.Context, in *MsgChatRequest, opts ...grpc.CallOption) (*MsgChatResponse, error) {
	out := new(MsgChatResponse)
	err := c.cc.Invoke(ctx, "/SocialService/MsgChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) MsgAction(ctx context.Context, in *MsgActionRequest, opts ...grpc.CallOption) (*MsgActionResponse, error) {
	out := new(MsgActionResponse)
	err := c.cc.Invoke(ctx, "/SocialService/MsgAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServiceServer is the server API for SocialService service.
// All implementations must embed UnimplementedSocialServiceServer
// for forward compatibility
type SocialServiceServer interface {
	GetFollowList(context.Context, *GetFollowListRequest) (*GetFollowListResponse, error)
	GetFollowerList(context.Context, *FollowerListRequest) (*FollowerListResponse, error)
	GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error)
	RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error)
	MsgChat(context.Context, *MsgChatRequest) (*MsgChatResponse, error)
	MsgAction(context.Context, *MsgActionRequest) (*MsgActionResponse, error)
	mustEmbedUnimplementedSocialServiceServer()
}

// UnimplementedSocialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialServiceServer struct {
}

func (UnimplementedSocialServiceServer) GetFollowList(context.Context, *GetFollowListRequest) (*GetFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (UnimplementedSocialServiceServer) GetFollowerList(context.Context, *FollowerListRequest) (*FollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (UnimplementedSocialServiceServer) GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedSocialServiceServer) RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAction not implemented")
}
func (UnimplementedSocialServiceServer) MsgChat(context.Context, *MsgChatRequest) (*MsgChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgChat not implemented")
}
func (UnimplementedSocialServiceServer) MsgAction(context.Context, *MsgActionRequest) (*MsgActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgAction not implemented")
}
func (UnimplementedSocialServiceServer) mustEmbedUnimplementedSocialServiceServer() {}

// UnsafeSocialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServiceServer will
// result in compilation errors.
type UnsafeSocialServiceServer interface {
	mustEmbedUnimplementedSocialServiceServer()
}

func RegisterSocialServiceServer(s grpc.ServiceRegistrar, srv SocialServiceServer) {
	s.RegisterService(&SocialService_ServiceDesc, srv)
}

func _SocialService_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocialService/GetFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetFollowList(ctx, req.(*GetFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocialService/GetFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetFollowerList(ctx, req.(*FollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocialService/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetFriendList(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_RelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).RelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocialService/RelationAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).RelationAction(ctx, req.(*RelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_MsgChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).MsgChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocialService/MsgChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).MsgChat(ctx, req.(*MsgChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_MsgAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).MsgAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocialService/MsgAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).MsgAction(ctx, req.(*MsgActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialService_ServiceDesc is the grpc.ServiceDesc for SocialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SocialService",
	HandlerType: (*SocialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollowList",
			Handler:    _SocialService_GetFollowList_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _SocialService_GetFollowerList_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _SocialService_GetFriendList_Handler,
		},
		{
			MethodName: "RelationAction",
			Handler:    _SocialService_RelationAction_Handler,
		},
		{
			MethodName: "MsgChat",
			Handler:    _SocialService_MsgChat_Handler,
		},
		{
			MethodName: "MsgAction",
			Handler:    _SocialService_MsgAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simpledy.proto",
}

// InteractServiceClient is the client API for InteractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractServiceClient interface {
	FavoriteAction(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*DouyinFavoriteActionResponse, error)
	GetFavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...grpc.CallOption) (*DouyinFavoriteListResponse, error)
	CommentAction(ctx context.Context, in *DouyinCommentActionRequest, opts ...grpc.CallOption) (*DouyinCommentActionResponse, error)
	GetCommentList(ctx context.Context, in *DouyinCommentListRequest, opts ...grpc.CallOption) (*DouyinCommentListResponse, error)
	GetLikeVideoUserId(ctx context.Context, in *DouyinLikeVideoRequest, opts ...grpc.CallOption) (*DouyinLikeVideoResponse, error)
}

type interactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractServiceClient(cc grpc.ClientConnInterface) InteractServiceClient {
	return &interactServiceClient{cc}
}

func (c *interactServiceClient) FavoriteAction(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*DouyinFavoriteActionResponse, error) {
	out := new(DouyinFavoriteActionResponse)
	err := c.cc.Invoke(ctx, "/InteractService/FavoriteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactServiceClient) GetFavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...grpc.CallOption) (*DouyinFavoriteListResponse, error) {
	out := new(DouyinFavoriteListResponse)
	err := c.cc.Invoke(ctx, "/InteractService/GetFavoriteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactServiceClient) CommentAction(ctx context.Context, in *DouyinCommentActionRequest, opts ...grpc.CallOption) (*DouyinCommentActionResponse, error) {
	out := new(DouyinCommentActionResponse)
	err := c.cc.Invoke(ctx, "/InteractService/CommentAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactServiceClient) GetCommentList(ctx context.Context, in *DouyinCommentListRequest, opts ...grpc.CallOption) (*DouyinCommentListResponse, error) {
	out := new(DouyinCommentListResponse)
	err := c.cc.Invoke(ctx, "/InteractService/GetCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactServiceClient) GetLikeVideoUserId(ctx context.Context, in *DouyinLikeVideoRequest, opts ...grpc.CallOption) (*DouyinLikeVideoResponse, error) {
	out := new(DouyinLikeVideoResponse)
	err := c.cc.Invoke(ctx, "/InteractService/GetLikeVideoUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractServiceServer is the server API for InteractService service.
// All implementations must embed UnimplementedInteractServiceServer
// for forward compatibility
type InteractServiceServer interface {
	FavoriteAction(context.Context, *DouyinFavoriteActionRequest) (*DouyinFavoriteActionResponse, error)
	GetFavoriteList(context.Context, *DouyinFavoriteListRequest) (*DouyinFavoriteListResponse, error)
	CommentAction(context.Context, *DouyinCommentActionRequest) (*DouyinCommentActionResponse, error)
	GetCommentList(context.Context, *DouyinCommentListRequest) (*DouyinCommentListResponse, error)
	GetLikeVideoUserId(context.Context, *DouyinLikeVideoRequest) (*DouyinLikeVideoResponse, error)
	mustEmbedUnimplementedInteractServiceServer()
}

// UnimplementedInteractServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInteractServiceServer struct {
}

func (UnimplementedInteractServiceServer) FavoriteAction(context.Context, *DouyinFavoriteActionRequest) (*DouyinFavoriteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteAction not implemented")
}
func (UnimplementedInteractServiceServer) GetFavoriteList(context.Context, *DouyinFavoriteListRequest) (*DouyinFavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteList not implemented")
}
func (UnimplementedInteractServiceServer) CommentAction(context.Context, *DouyinCommentActionRequest) (*DouyinCommentActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentAction not implemented")
}
func (UnimplementedInteractServiceServer) GetCommentList(context.Context, *DouyinCommentListRequest) (*DouyinCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedInteractServiceServer) GetLikeVideoUserId(context.Context, *DouyinLikeVideoRequest) (*DouyinLikeVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeVideoUserId not implemented")
}
func (UnimplementedInteractServiceServer) mustEmbedUnimplementedInteractServiceServer() {}

// UnsafeInteractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractServiceServer will
// result in compilation errors.
type UnsafeInteractServiceServer interface {
	mustEmbedUnimplementedInteractServiceServer()
}

func RegisterInteractServiceServer(s grpc.ServiceRegistrar, srv InteractServiceServer) {
	s.RegisterService(&InteractService_ServiceDesc, srv)
}

func _InteractService_FavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFavoriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServiceServer).FavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InteractService/FavoriteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServiceServer).FavoriteAction(ctx, req.(*DouyinFavoriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractService_GetFavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServiceServer).GetFavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InteractService/GetFavoriteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServiceServer).GetFavoriteList(ctx, req.(*DouyinFavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractService_CommentAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinCommentActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServiceServer).CommentAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InteractService/CommentAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServiceServer).CommentAction(ctx, req.(*DouyinCommentActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractService_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServiceServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InteractService/GetCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServiceServer).GetCommentList(ctx, req.(*DouyinCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractService_GetLikeVideoUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinLikeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServiceServer).GetLikeVideoUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InteractService/GetLikeVideoUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServiceServer).GetLikeVideoUserId(ctx, req.(*DouyinLikeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractService_ServiceDesc is the grpc.ServiceDesc for InteractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InteractService",
	HandlerType: (*InteractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavoriteAction",
			Handler:    _InteractService_FavoriteAction_Handler,
		},
		{
			MethodName: "GetFavoriteList",
			Handler:    _InteractService_GetFavoriteList_Handler,
		},
		{
			MethodName: "CommentAction",
			Handler:    _InteractService_CommentAction_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _InteractService_GetCommentList_Handler,
		},
		{
			MethodName: "GetLikeVideoUserId",
			Handler:    _InteractService_GetLikeVideoUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simpledy.proto",
}
