// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: video.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error) {
	out := new(DouyinFeedResponse)
	err := c.cc.Invoke(ctx, "/proto.Feed/Feed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility
type FeedServer interface {
	Feed(context.Context, *DouyinFeedRequest) (*DouyinFeedResponse, error)
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServer struct {
}

func (UnimplementedFeedServer) Feed(context.Context, *DouyinFeedRequest) (*DouyinFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Feed/Feed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).Feed(ctx, req.(*DouyinFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _Feed_Feed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}

// PublishListClient is the client API for PublishList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishListClient interface {
	PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error)
}

type publishListClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishListClient(cc grpc.ClientConnInterface) PublishListClient {
	return &publishListClient{cc}
}

func (c *publishListClient) PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error) {
	out := new(DouyinPublishListResponse)
	err := c.cc.Invoke(ctx, "/proto.PublishList/PublishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishListServer is the server API for PublishList service.
// All implementations must embed UnimplementedPublishListServer
// for forward compatibility
type PublishListServer interface {
	PublishList(context.Context, *DouyinPublishListRequest) (*DouyinPublishListResponse, error)
	mustEmbedUnimplementedPublishListServer()
}

// UnimplementedPublishListServer must be embedded to have forward compatible implementations.
type UnimplementedPublishListServer struct {
}

func (UnimplementedPublishListServer) PublishList(context.Context, *DouyinPublishListRequest) (*DouyinPublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishList not implemented")
}
func (UnimplementedPublishListServer) mustEmbedUnimplementedPublishListServer() {}

// UnsafePublishListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishListServer will
// result in compilation errors.
type UnsafePublishListServer interface {
	mustEmbedUnimplementedPublishListServer()
}

func RegisterPublishListServer(s grpc.ServiceRegistrar, srv PublishListServer) {
	s.RegisterService(&PublishList_ServiceDesc, srv)
}

func _PublishList_PublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinPublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishListServer).PublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublishList/PublishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishListServer).PublishList(ctx, req.(*DouyinPublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublishList_ServiceDesc is the grpc.ServiceDesc for PublishList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PublishList",
	HandlerType: (*PublishListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishList",
			Handler:    _PublishList_PublishList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}

// PublishActionClient is the client API for PublishAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishActionClient interface {
	PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error)
}

type publishActionClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishActionClient(cc grpc.ClientConnInterface) PublishActionClient {
	return &publishActionClient{cc}
}

func (c *publishActionClient) PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error) {
	out := new(DouyinPublishActionResponse)
	err := c.cc.Invoke(ctx, "/proto.PublishAction/PublishAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishActionServer is the server API for PublishAction service.
// All implementations must embed UnimplementedPublishActionServer
// for forward compatibility
type PublishActionServer interface {
	PublishAction(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error)
	mustEmbedUnimplementedPublishActionServer()
}

// UnimplementedPublishActionServer must be embedded to have forward compatible implementations.
type UnimplementedPublishActionServer struct {
}

func (UnimplementedPublishActionServer) PublishAction(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAction not implemented")
}
func (UnimplementedPublishActionServer) mustEmbedUnimplementedPublishActionServer() {}

// UnsafePublishActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishActionServer will
// result in compilation errors.
type UnsafePublishActionServer interface {
	mustEmbedUnimplementedPublishActionServer()
}

func RegisterPublishActionServer(s grpc.ServiceRegistrar, srv PublishActionServer) {
	s.RegisterService(&PublishAction_ServiceDesc, srv)
}

func _PublishAction_PublishAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinPublishActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishActionServer).PublishAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublishAction/PublishAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishActionServer).PublishAction(ctx, req.(*DouyinPublishActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublishAction_ServiceDesc is the grpc.ServiceDesc for PublishAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PublishAction",
	HandlerType: (*PublishActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishAction",
			Handler:    _PublishAction_PublishAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}

// UserInfoClient is the client API for UserInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInfoClient interface {
	UserInfo(ctx context.Context, in *DouyinUserRequest, opts ...grpc.CallOption) (*DouyinUserResponse, error)
}

type userInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInfoClient(cc grpc.ClientConnInterface) UserInfoClient {
	return &userInfoClient{cc}
}

func (c *userInfoClient) UserInfo(ctx context.Context, in *DouyinUserRequest, opts ...grpc.CallOption) (*DouyinUserResponse, error) {
	out := new(DouyinUserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserInfo/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInfoServer is the server API for UserInfo service.
// All implementations must embed UnimplementedUserInfoServer
// for forward compatibility
type UserInfoServer interface {
	UserInfo(context.Context, *DouyinUserRequest) (*DouyinUserResponse, error)
	mustEmbedUnimplementedUserInfoServer()
}

// UnimplementedUserInfoServer must be embedded to have forward compatible implementations.
type UnimplementedUserInfoServer struct {
}

func (UnimplementedUserInfoServer) UserInfo(context.Context, *DouyinUserRequest) (*DouyinUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserInfoServer) mustEmbedUnimplementedUserInfoServer() {}

// UnsafeUserInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInfoServer will
// result in compilation errors.
type UnsafeUserInfoServer interface {
	mustEmbedUnimplementedUserInfoServer()
}

func RegisterUserInfoServer(s grpc.ServiceRegistrar, srv UserInfoServer) {
	s.RegisterService(&UserInfo_ServiceDesc, srv)
}

func _UserInfo_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserInfo/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServer).UserInfo(ctx, req.(*DouyinUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInfo_ServiceDesc is the grpc.ServiceDesc for UserInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserInfo",
	HandlerType: (*UserInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInfo",
			Handler:    _UserInfo_UserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}

// UserRegisterClient is the client API for UserRegister service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRegisterClient interface {
	UserRegister(ctx context.Context, in *DouyinUserRegisterRequest, opts ...grpc.CallOption) (*DouyinUserRegisterResponse, error)
}

type userRegisterClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRegisterClient(cc grpc.ClientConnInterface) UserRegisterClient {
	return &userRegisterClient{cc}
}

func (c *userRegisterClient) UserRegister(ctx context.Context, in *DouyinUserRegisterRequest, opts ...grpc.CallOption) (*DouyinUserRegisterResponse, error) {
	out := new(DouyinUserRegisterResponse)
	err := c.cc.Invoke(ctx, "/proto.UserRegister/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRegisterServer is the server API for UserRegister service.
// All implementations must embed UnimplementedUserRegisterServer
// for forward compatibility
type UserRegisterServer interface {
	UserRegister(context.Context, *DouyinUserRegisterRequest) (*DouyinUserRegisterResponse, error)
	mustEmbedUnimplementedUserRegisterServer()
}

// UnimplementedUserRegisterServer must be embedded to have forward compatible implementations.
type UnimplementedUserRegisterServer struct {
}

func (UnimplementedUserRegisterServer) UserRegister(context.Context, *DouyinUserRegisterRequest) (*DouyinUserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserRegisterServer) mustEmbedUnimplementedUserRegisterServer() {}

// UnsafeUserRegisterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRegisterServer will
// result in compilation errors.
type UnsafeUserRegisterServer interface {
	mustEmbedUnimplementedUserRegisterServer()
}

func RegisterUserRegisterServer(s grpc.ServiceRegistrar, srv UserRegisterServer) {
	s.RegisterService(&UserRegister_ServiceDesc, srv)
}

func _UserRegister_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinUserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserRegister/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServer).UserRegister(ctx, req.(*DouyinUserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRegister_ServiceDesc is the grpc.ServiceDesc for UserRegister service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRegister_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserRegister",
	HandlerType: (*UserRegisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _UserRegister_UserRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}

// UserLoginClient is the client API for UserLogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserLoginClient interface {
	UserLogin(ctx context.Context, in *DouyinUserLoginRequest, opts ...grpc.CallOption) (*DouyinUserLoginResponse, error)
}

type userLoginClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLoginClient(cc grpc.ClientConnInterface) UserLoginClient {
	return &userLoginClient{cc}
}

func (c *userLoginClient) UserLogin(ctx context.Context, in *DouyinUserLoginRequest, opts ...grpc.CallOption) (*DouyinUserLoginResponse, error) {
	out := new(DouyinUserLoginResponse)
	err := c.cc.Invoke(ctx, "/proto.UserLogin/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLoginServer is the server API for UserLogin service.
// All implementations must embed UnimplementedUserLoginServer
// for forward compatibility
type UserLoginServer interface {
	UserLogin(context.Context, *DouyinUserLoginRequest) (*DouyinUserLoginResponse, error)
	mustEmbedUnimplementedUserLoginServer()
}

// UnimplementedUserLoginServer must be embedded to have forward compatible implementations.
type UnimplementedUserLoginServer struct {
}

func (UnimplementedUserLoginServer) UserLogin(context.Context, *DouyinUserLoginRequest) (*DouyinUserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserLoginServer) mustEmbedUnimplementedUserLoginServer() {}

// UnsafeUserLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserLoginServer will
// result in compilation errors.
type UnsafeUserLoginServer interface {
	mustEmbedUnimplementedUserLoginServer()
}

func RegisterUserLoginServer(s grpc.ServiceRegistrar, srv UserLoginServer) {
	s.RegisterService(&UserLogin_ServiceDesc, srv)
}

func _UserLogin_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLoginServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserLogin/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLoginServer).UserLogin(ctx, req.(*DouyinUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserLogin_ServiceDesc is the grpc.ServiceDesc for UserLogin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserLogin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserLogin",
	HandlerType: (*UserLoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _UserLogin_UserLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}

// VideoInfoClient is the client API for VideoInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoInfoClient interface {
	VideoInfo(ctx context.Context, in *DouyinVideoInfoRequest, opts ...grpc.CallOption) (*DouyinVideoInfoResponse, error)
}

type videoInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoInfoClient(cc grpc.ClientConnInterface) VideoInfoClient {
	return &videoInfoClient{cc}
}

func (c *videoInfoClient) VideoInfo(ctx context.Context, in *DouyinVideoInfoRequest, opts ...grpc.CallOption) (*DouyinVideoInfoResponse, error) {
	out := new(DouyinVideoInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.VideoInfo/VideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoInfoServer is the server API for VideoInfo service.
// All implementations must embed UnimplementedVideoInfoServer
// for forward compatibility
type VideoInfoServer interface {
	VideoInfo(context.Context, *DouyinVideoInfoRequest) (*DouyinVideoInfoResponse, error)
	mustEmbedUnimplementedVideoInfoServer()
}

// UnimplementedVideoInfoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoInfoServer struct {
}

func (UnimplementedVideoInfoServer) VideoInfo(context.Context, *DouyinVideoInfoRequest) (*DouyinVideoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoInfo not implemented")
}
func (UnimplementedVideoInfoServer) mustEmbedUnimplementedVideoInfoServer() {}

// UnsafeVideoInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoInfoServer will
// result in compilation errors.
type UnsafeVideoInfoServer interface {
	mustEmbedUnimplementedVideoInfoServer()
}

func RegisterVideoInfoServer(s grpc.ServiceRegistrar, srv VideoInfoServer) {
	s.RegisterService(&VideoInfo_ServiceDesc, srv)
}

func _VideoInfo_VideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinVideoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).VideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VideoInfo/VideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).VideoInfo(ctx, req.(*DouyinVideoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoInfo_ServiceDesc is the grpc.ServiceDesc for VideoInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VideoInfo",
	HandlerType: (*VideoInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoInfo",
			Handler:    _VideoInfo_VideoInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
